«адание (многопоточность)
Ќапишите классы, реализующие "“араканьи бега":†
¬ бегах участвуют несколько тараканов (класс†Cocroach), исполн€ющимис€ в отдельных потоках.††
“араканы стартуют одновременно по сигналу судьи (класс†Judge).††
ѕосле того, как все тараканы закончили бег судь€ подводит результаты и запускает следующий круг соревнований.†
ѕримечани€†
“араканы должны быть "многоразовыми" Ч поток таракана бежит все этапы, а не только один.††
во врем€ подведени€ результатов тараканы сто€т.† 
«адание (—ериализаци€):
ћодифицировать «адание 3, чтобы там содержались пол€†static,†final,†transient.††
ѕри помощи механизма сериализации сохранить созданный в «адании 3 массив целиком в файл.††
—оздать новый массив и при помощи механизма сериализации прочитать массив из файла.††
ѕроделать те же операции, но выполн€€ сериализацию дл€ каждого элемента массива.††
—ериализовать/десериализовать массив при помощи интерфейса†externalizable.††
—равнить исходный и полученный массивы, использу€ метод†equals† 

«адание (Ўаблоны проектировани€)
—уществует некий†xml†файл с описанием структуры компьютерных компонентов.†
<component name=ФcomputerФ key=Фcomputer_231Ф>
<attribute name=ФipAddressФ value=Ф127.0.0.1Ф/>
<attribute name=ФmacAddressФ value=ФФ/>
<attribute name=ФprinterIdФ value=ФprinterKeyФ attributeType=ФintegerФ>
</attribute>
<component name=ФmotherboardФ>
Е
</component>
</component>
<component name=ФprinterФ>
Е
</component>
Ќаписать парсер данного документа, и на основе структуры†xml†создать программную иерархию компонентов.††
ќбойти все элементы и в зависимости от типа элемента (component†или†attribute) выполнить проверки на корректную структуру компьютера.†
Ќапример,†
Ј†††††††††компьютер не может быть без жесткого диска.†
Ј†††††††††«начение атрибутов не может быть пустым.
Ј†††††††††“ип значени€ атрибута должен соответствовать заданному типу, если он задан.
Ј†††††††††если у компьютера задан атрибут†printerId, об€зательно должен существовать принтер с заданным†Id. 
